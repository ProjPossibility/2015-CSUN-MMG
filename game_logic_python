# -*- coding: utf-8 -*-
#Declare global direction variables
UP = 0
RIGHT = 1
DOWN = 2
LEFT = 3

#Read maze file and convert into binary array
import re
import maze_read_game_logic as mrgl

tiles_dict = mrgl.readfile('maze10')
print tiles_dict
print len(tiles_dict)
class Game:    
    def __init__(self, game_tiles, num_players, state):
        self.tiles = game_tiles
        self.num_players = num_players
        self.state = 0
    def update_state():
        pass
    

class Player:
    def __init__(self, location, facing):
        #location should be passed as a string        
        self.location = location
        self.facing = facing
        self.current_tile = tiles_dict[location]
        
    def update_location(self, new_location):
        self.location = new_location
        self.current_tile = tiles_dict[str(new_location)]
    
    def check_if_wall(self,direction):
        if self.current_tile[direction] == 0:
            return False
        else:
            return True
            
    def look(self,direction):
        if self.check_if_wall(direction):
            #response for wall
            pass
        elif not self.check_if_wall(direction):
            #response for no wall
            pass
        
    def move(self,direction):
       if not self.check_if_wall(direction):
            if direction == 0:
                self.update_location(str(int(self.location[0])-1)+self.location[1])
            elif direction == 1:
                self.update_location(self.location[0]+str(int(self.location[1])+1))
            elif direction == 2:
                self.update_location(str(int(self.location[0])+1)+self.location[1])
            elif direction == 3:
                self.update_location(self.location[0]+str(int(self.location[1])+1))

bob = Player('02',0)
print bob.location
print bob.current_tile
bob.move(0)
print bob.location
bob.move(1)
print bob.location
print bob.current_tile
bob.move(2)
print bob.location
print bob.current_tile
bob.move(3)
print bob.location
